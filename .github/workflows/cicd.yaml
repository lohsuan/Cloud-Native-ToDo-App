# github action to run ci/cd pipeline on push
name: build-test-deploy

on:
  push:
    branches:
      - main
      - feature*
  workflow_dispatch:

jobs:
  
  build-test-deploy-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Download previous coverage report
        uses: actions/download-artifact@v4  
        # with:
        #   name: code-coverage-report
          

      - name: Display structure of downloaded files 
        run: ls -R

      - shell: bash
        run: |
          value=`cat index.html`
          PREVIOUS_COVERAGE=$(echo $value | grep -oP "(?<=<span class=\"strong\">)\d+\.\d+(?=%)" | head -1)
          echo "Previous Coverage: $PREVIOUS_COVERAGE"
          echo "$PREVIOUS_COVERAGE" > $GITHUB_OUTPUT
        id: previous_coverage

      - name: Run tests
        run: |
          cd backend
          npm run test
      
          COVERAGE_PERCENTAGE=$(cat coverage/index.html | grep -oP "(?<=<span class=\"strong\">)\d+\.\d+(?=%)" | head -1)
          echo "Coverage Percentage: $COVERAGE_PERCENTAGE"
          PREVIOUS_COVERAGE=$(cat ${{ steps.previous_coverage.outputs.GITHUB_OUTPUT }})


          if (( $(echo "$COVERAGE_PERCENTAGE < $PREVIOUS_COVERAGE" | bc -l) )); then
            echo "Coverage is less than previous coverage: $PREVIOUS_COVERAGE%"
            exit 1  # Fail the job
          fi

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: backend/coverage/index.html
      
      # - name: Install dependencies
      #   run: |
      #     cd frontend
      #     npm ci
      # - name: Run tests
      #   run: |
      #     cd frontend
      #     npm run cy:test
        # job fail if coverage rate less than 60% 

  #     - name: Build and push Docker image
  #       run: |
  #         echo ${{ secrets.DOCKER_PASSWORD }} | docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

  #         docker build -t ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-ui:${{ github.run_id }} ./frontend
  #         docker tag ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-ui:${{ github.run_id }} ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-ui:latest

  #         docker build -t ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-app:${{ github.run_id }} ./backend
  #         docker tag ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-app:${{ github.run_id }} ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-app:latest
          
  #         docker push ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-ui:${{ github.run_id }}
  #         docker push ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-ui:latest
          
  #         docker push ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-app:${{ github.run_id }}
  #         docker push ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-app:latest

  # deploy-k8s:
  #   needs: build-test-deploy-docker
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: azure/setup-kubectl@v4

  #     - uses: Azure/k8s-set-context@v4
  #       with:
  #         kubeconfig: ${{ secrets.KUBE_CONFIG }}


  #     - name: Deploy to Kubernetes
  #       uses: Azure/k8s-deploy@v5
  #       with:
  #         action: deploy
  #         manifests: |
  #           k8s/services.yaml
  #           k8s/deploys.yaml
  #         images: |
  #           ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-app:${{ github.run_id }}
  #           ghcr.io/${{ secrets.DOCKER_USERNAME }}/todo-ui:${{ github.run_id }}
  #         skip-tls-verify: true

  #   # Check k8s deployment status and return status
  #     - name: Check deployment status
  #       run: |
  #         kubectl rollout status deployment/todo-app-deploy
  #         kubectl rollout status deployment/todo-ui-deploy
  #         kubectl get deployments -o wide

